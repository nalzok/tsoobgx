% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bgx.Booster.R
\name{bgx.attr}
\alias{bgx.attr}
\alias{bgx.attr<-}
\alias{bgx.attributes}
\alias{bgx.attributes<-}
\title{Accessors for serializable attributes of a model.}
\usage{
bgx.attr(object, name)

bgx.attr(object, name) <- value

bgx.attributes(object)

bgx.attributes(object) <- value
}
\arguments{
\item{object}{Object of class \code{bgx.Booster} or \code{bgx.Booster.handle}.}

\item{name}{a non-empty character string specifying which attribute is to be accessed.}

\item{value}{a value of an attribute for \code{bgx.attr<-}; for \code{bgx.attributes<-}
it's a list (or an object coercible to a list) with the names of attributes to set
and the elements corresponding to attribute values.
Non-character values are converted to character.
When attribute value is not a scalar, only the first index is used.
Use \code{NULL} to remove an attribute.}
}
\value{
\code{bgx.attr} returns either a string value of an attribute
or \code{NULL} if an attribute wasn't stored in a model.

\code{bgx.attributes} returns a list of all attribute stored in a model
or \code{NULL} if a model has no stored attributes.
}
\description{
These methods allow to manipulate the key-value attribute strings of an tsoobgx model.
}
\details{
The primary purpose of tsoobgx model attributes is to store some meta-data about the model.
Note that they are a separate concept from the object attributes in R.
Specifically, they refer to key-value strings that can be attached to an tsoobgx model,
stored together with the model's binary representation, and accessed later
(from R or any other interface).
In contrast, any R-attribute assigned to an R-object of \code{bgx.Booster} class
would not be saved by \code{bgx.save} because an tsoobgx model is an external memory object
and its serialization is handled externally.
Also, setting an attribute that has the same name as one of tsoobgx's parameters wouldn't
change the value of that parameter for a model.
Use \code{\link{bgx.parameters<-}} to set or change model parameters.

The attribute setters would usually work more efficiently for \code{bgx.Booster.handle}
than for \code{bgx.Booster}, since only just a handle (pointer) would need to be copied.
That would only matter if attributes need to be set many times.
Note, however, that when feeding a handle of an \code{bgx.Booster} object to the attribute setters,
the raw model cache of an \code{bgx.Booster} object would not be automatically updated,
and it would be user's responsibility to call \code{bgx.save.raw} to update it.

The \code{bgx.attributes<-} setter either updates the existing or adds one or several attributes,
but it doesn't delete the other existing attributes.
}
\examples{
data(agaricus.train, package='tsoobgx')
train <- agaricus.train

bst <- tsoobgx(data = train$data, label = train$label, max_depth = 2,
               eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")

bgx.attr(bst, "my_attribute") <- "my attribute value"
print(bgx.attr(bst, "my_attribute"))
bgx.attributes(bst) <- list(a = 123, b = "abc")

bgx.save(bst, 'bgx.model')
bst1 <- bgx.load('bgx.model')
if (file.exists('bgx.model')) file.remove('bgx.model')
print(bgx.attr(bst1, "my_attribute"))
print(bgx.attributes(bst1))

# deletion:
bgx.attr(bst1, "my_attribute") <- NULL
print(bgx.attributes(bst1))
bgx.attributes(bst1) <- list(a = NULL, b = NULL)
print(bgx.attributes(bst1))

}
