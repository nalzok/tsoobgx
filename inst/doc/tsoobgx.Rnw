\documentclass{article}
\RequirePackage{url}
\usepackage{hyperref}
\RequirePackage{amsmath}
\RequirePackage{natbib}
\RequirePackage[a4paper,lmargin={1.25in},rmargin={1.25in},tmargin={1in},bmargin={1in}]{geometry}

\makeatletter
% \VignetteIndexEntry{tsoobgx: eXtreme Gradient Boosting}
%\VignetteKeywords{tsoobgx, gbm, gradient boosting machines}
%\VignettePackage{tsoobgx}
% \VignetteEngine{knitr::knitr}
\makeatother

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<knitropts,echo=FALSE,message=FALSE>>=
if (require('knitr')) opts_chunk$set(fig.width = 5, fig.height = 5, fig.align = 'center', tidy = FALSE, warning = FALSE, cache = TRUE)
@

%
<<prelim,echo=FALSE>>=
tsoobgx.version <- packageDescription("tsoobgx")$Version

@
%

    \begin{center}
    \vspace*{6\baselineskip}
    \rule{\textwidth}{1.6pt}\vspace*{-\baselineskip}\vspace*{2pt}
    \rule{\textwidth}{0.4pt}\\[2\baselineskip]
    {\LARGE \textbf{tsoobgx: eXtreme Gradient Boosting}}\\[1.2\baselineskip]
    \rule{\textwidth}{0.4pt}\vspace*{-\baselineskip}\vspace{3.2pt}
    \rule{\textwidth}{1.6pt}\\[2\baselineskip]
    {\Large Tianqi Chen, Tong He}\\[\baselineskip]
    {\large Package Version: \Sexpr{tsoobgx.version}}\\[\baselineskip]
    {\large \today}\par
    \vfill
    \end{center}

\thispagestyle{empty}

\clearpage

\setcounter{page}{1}

\section{Introduction}

This is an introductory document of using the \verb@tsoobgx@ package in R. 

\verb@tsoobgx@ is short for eXtreme Gradient Boosting package. It is an efficient
 and scalable implementation of gradient boosting framework by \citep{friedman2001greedy} \citep{friedman2000additive}. 
The package includes efficient linear model solver and tree learning algorithm.
It supports various objective functions, including regression, classification
and ranking. The package is made to be extendible, so that users are also allowed to define their own objectives easily. It has several features:
\begin{enumerate}
    \item{Speed: }{\verb@tsoobgx@ can automatically do parallel computation on 
    Windows and Linux, with openmp. It is generally over 10 times faster than
    \verb@gbm@.}
    \item{Input Type: }{\verb@tsoobgx@ takes several types of input data:}
    \begin{itemize}
        \item{Dense Matrix: }{R's dense matrix, i.e. \verb@matrix@}
        \item{Sparse Matrix: }{R's sparse matrix \verb@Matrix::dgCMatrix@}
        \item{Data File: }{Local data files}
        \item{bgx.DMatrix: }{\verb@tsoobgx@'s own class. Recommended.}
    \end{itemize}
    \item{Sparsity: }{\verb@tsoobgx@ accepts sparse input for both tree booster 
    and linear booster, and is optimized for sparse input.}
    \item{Customization: }{\verb@tsoobgx@ supports customized objective function 
    and evaluation function}
    \item{Performance: }{\verb@tsoobgx@ has better performance on several different
    datasets.}
\end{enumerate}


\section{Example with Mushroom data}

In this section, we will illustrate some common usage of \verb@tsoobgx@. The 
Mushroom data is cited from UCI Machine Learning Repository. \citep{Bache+Lichman:2013} 

<<Training and prediction with iris>>=
library(tsoobgx)
data(agaricus.train, package='tsoobgx')
data(agaricus.test, package='tsoobgx')
train <- agaricus.train
test <- agaricus.test
bst <- tsoobgx(data = train$data, label = train$label, max_depth = 2, eta = 1, 
               nrounds = 2, objective = "binary:logistic")
bgx.save(bst, 'model.save')
bst = bgx.load('model.save')
pred <- predict(bst, test$data)
@

\verb@tsoobgx@ is the main function to train a \verb@Booster@, i.e. a model.
\verb@predict@ does prediction on the model.

Here we can save the model to a binary local file, and load it when needed.
We can't inspect the trees inside. However we have another function to save the
model in plain text. 
<<Dump Model>>=
bgx.dump(bst, 'model.dump')
@

The output looks like 

\begin{verbatim}
booster[0]:
0:[f28<1.00001] yes=1,no=2,missing=2
  1:[f108<1.00001] yes=3,no=4,missing=4
    3:leaf=1.85965
    4:leaf=-1.94071
  2:[f55<1.00001] yes=5,no=6,missing=6
    5:leaf=-1.70044
    6:leaf=1.71218
booster[1]:
0:[f59<1.00001] yes=1,no=2,missing=2
  1:leaf=-6.23624
  2:[f28<1.00001] yes=3,no=4,missing=4
    3:leaf=-0.96853
    4:leaf=0.784718
\end{verbatim}

It is important to know \verb@tsoobgx@'s own data type: \verb@bgx.DMatrix@.
It speeds up \verb@tsoobgx@, and is needed for advanced features such as 
training from initial prediction value, weighted training instance. 

We can use \verb@bgx.DMatrix@ to construct an \verb@bgx.DMatrix@ object:
<<bgx.DMatrix>>=
dtrain <- bgx.DMatrix(train$data, label = train$label)
class(dtrain)
head(getinfo(dtrain,'label'))
@

We can also save the matrix to a binary file. Then load it simply with 
\verb@bgx.DMatrix@
<<save model>>=
bgx.DMatrix.save(dtrain, 'bgx.DMatrix')
dtrain = bgx.DMatrix('bgx.DMatrix')
@

\section{Advanced Examples}

The function \verb@tsoobgx@ is a simple function with less parameter, in order
to be R-friendly. The core training function is wrapped in \verb@bgx.train@. It is more flexible than \verb@tsoobgx@, but it requires users to read the document a bit more carefully.

\verb@bgx.train@ only accept a \verb@bgx.DMatrix@ object as its input, while it supports advanced features as custom objective and evaluation functions.

<<Customized loss function>>=
logregobj <- function(preds, dtrain) {
   labels <- getinfo(dtrain, "label")
   preds <- 1/(1 + exp(-preds))
   grad <- preds - labels
   hess <- preds * (1 - preds)
   return(list(grad = grad, hess = hess))
}

evalerror <- function(preds, dtrain) {
  labels <- getinfo(dtrain, "label")
  err <- sqrt(mean((preds-labels)^2))
  return(list(metric = "MSE", value = err))
}

dtest <- bgx.DMatrix(test$data, label = test$label)
watchlist <- list(eval = dtest, train = dtrain)
param <- list(max_depth = 2, eta = 1, silent = 1)

bst <- bgx.train(param, dtrain, nrounds = 2, watchlist, logregobj, evalerror, maximize = FALSE)
@

The gradient and second order gradient is required for the output of customized 
objective function. 

We also have \verb@slice@ for row extraction. It is useful in 
cross-validation.

For a walkthrough demo, please see \verb@R-package/demo/@ for further 
details.

\section{The Higgs Boson competition}

We have made a demo for \href{http://www.kaggle.com/c/higgs-boson}{the Higgs 
Boson Machine Learning Challenge}. 

Here are the instructions to make a submission
\begin{enumerate}
    \item Download the \href{http://www.kaggle.com/c/higgs-boson/data}{datasets}
    and extract them to \verb@data/@.
    \item Run scripts under \verb@tsoobgx/demo/kaggle-higgs/@: 
    \href{https://github.com/tqchen/tsoobgx/blob/master/demo/kaggle-higgs/higgs-train.R}{higgs-train.R} 
    and \href{https://github.com/tqchen/tsoobgx/blob/master/demo/kaggle-higgs/higgs-pred.R}{higgs-pred.R}. 
    The computation will take less than a minute on Intel i7. 
    \item Go to the \href{http://www.kaggle.com/c/higgs-boson/submissions/attach}{submission page} 
    and submit your result.
\end{enumerate}

We provide \href{https://github.com/tqchen/tsoobgx/blob/master/demo/kaggle-higgs/speedtest.R}{a script}
to compare the time cost on the higgs dataset with \verb@gbm@ and \verb@tsoobgx@. 
The training set contains 350000 records and 30 features. 

\verb@tsoobgx@ can automatically do parallel computation. On a machine with Intel
i7-4700MQ and 24GB memories, we found that \verb@tsoobgx@ costs about 35 seconds, which is about 20 times faster
than \verb@gbm@. When we limited \verb@tsoobgx@ to use only one thread, it was 
still about two times faster than \verb@gbm@. 

Meanwhile, the result from \verb@tsoobgx@ reaches 
\href{http://www.kaggle.com/c/higgs-boson/details/evaluation}{3.60@AMS} with a 
single model. This results stands in the 
\href{http://www.kaggle.com/c/higgs-boson/leaderboard}{top 30\%} of the 
competition. 

\bibliographystyle{jss}
\nocite{*} % list uncited references
\bibliography{tsoobgx}

\end{document}

<<Temp file cleaning, include=FALSE>>=
file.remove("bgx.DMatrix")
file.remove("model.dump")
file.remove("model.save")
@
